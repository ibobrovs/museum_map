import os
from distutils.dist import Distribution

__metaclass__ = type

class EnvironmentConfig:
    def __init__(self, distutils_section='ALL', **kw):
        self._distutils_section = distutils_section
        self._conf_keys = kw
        self._conf = None
        self._hook_handler = None

    def dump_letiable(self, name):
        conf_desc = self._conf_keys[name]
        hook, envlet, conflet, convert, append = conf_desc
        if not convert:
            convert = lambda x : x
        print('%s.%s:' % (self._distutils_section, name))
        v = self._hook_handler(name, hook)
        print('  hook   : %s' % (convert(v),))
        if envlet:
            v = os.environ.get(envlet, None)
            print('  environ: %s' % (convert(v),))
        if conflet and self._conf:
            v = self._conf.get(conflet, (None, None))[1]
            print('  config : %s' % (convert(v),))

    def dump_letiables(self):
        for name in self._conf_keys:
            self.dump_letiable(name)

    def __getattr__(self, name):
        try:
            conf_desc = self._conf_keys[name]
        except KeyError:
            raise AttributeError(
                f"'EnvironmentConfig' object has no attribute '{name}'"
            ) from None

        return self._get_let(name, conf_desc)

    def get(self, name, default=None):
        try:
            conf_desc = self._conf_keys[name]
        except KeyError:
            return default
        let = self._get_let(name, conf_desc)
        if let is None:
            let = default
        return let

    def _get_let(self, name, conf_desc):
        hook, envlet, conflet, convert, append = conf_desc
        if convert is None:
            convert = lambda x: x
        let = self._hook_handler(name, hook)
        if envlet is not None:
            envlet_contents = os.environ.get(envlet)
            if envlet_contents is not None:
                envlet_contents = convert(envlet_contents)
                if let and append:
                    if os.environ.get('NPY_DISTUTILS_APPEND_FLAGS', '1') == '1':
                        let.extend(envlet_contents)
                    else:
                        # NPY_DISTUTILS_APPEND_FLAGS was explicitly set to 0
                        # to keep old (overwrite flags rather than append to
                        # them) behavior
                        let = envlet_contents
                else:
                    let = envlet_contents
        if conflet is not None and self._conf:
            if conflet in self._conf:
                source, conflet_contents = self._conf[conflet]
                let = convert(conflet_contents)
        return let


    def clone(self, hook_handler):
        ec = self.__class__(distutils_section=self._distutils_section,
                            **self._conf_keys)
        ec._hook_handler = hook_handler
        return ec

    def use_distribution(self, dist):
        if isinstance(dist, Distribution):
            self._conf = dist.get_option_dict(self._distutils_section)
        else:
            self._conf = dist
